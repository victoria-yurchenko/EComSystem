version: '3.9'
services:
  sqlserver:
    build:
      context: .
      dockerfile: Dockerfile.sqlserver
    container_name: sqlserver
    ports:
      - "${SQLSERVER_PORT}:${SQLSERVER_PORT}"
    environment:
      SA_PASSWORD: "${SA_PASSWORD}"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "${MSSQL_PID}"
    networks:
      - app_network
    volumes:
      - sqlserver_data:/var/opt/mssql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    command: >
      /bin/bash -c "/opt/mssql/bin/sqlservr & sleep 30 && /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD}  -Q 'SELECT 1' & wait"

  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - app_network
    restart: on-failure
    command: >
       bash -c "sleep 30 && /wait-for-it.sh sqlserver:1433 -t 60 &&
           dotnet ef database update --project Infrastructure/Infrastructure.csproj --startup-project Presentation/Presentation.csproj --connection \"Server=sqlserver,1433;Database=SubscriptionDb;User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=true;\" &&
           echo 'Migration completed'"
           
  redis:
    image: "redis:latest"
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - app_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      ASPNETCORE_ENVIRONMENT: "${ASPNETCORE_ENVIRONMENT}"
      ASPNETCORE_URLS: "${ASPNETCORE_URLS}"
      ConnectionStrings__DefaultConnection: "${CONNECTION_STRING}"
    depends_on:
      sqlserver:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks:
      - app_network
    volumes:
      - data-protection-keys:/root/.aspnet/DataProtection-Keys
    restart: always
    entrypoint: ["dotnet", "Presentation.dll"]

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      -  "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    networks:
      - app_network
    # dev mode
    volumes:
      - ./client:/app
      - /app/node_modules
      - ./jsconfig.json:/app/jsconfig.json:ro
    environment:
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      NODE_ENV: ${NODE_ENV}
      REACT_APP_API_URL: "${REACT_APP_API_URL}"
    restart: always
    command: ["npm", "start"]

networks:
  app_network:

volumes:
  data-protection-keys:
  sqlserver_data: